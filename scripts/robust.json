{
  "$id": "http://fixme.com/robust.json",
  "$schema": "http://json-schema.org/schema#",
  "title" : "ROBUST bug file schema", 

  "type": "object",
  "properties": {
    "id" : { 
      "type" : "string", 
      "minLength" : 7,
      "maxLength" : 7,
      "pattern" : "^([a-f]|[0-9]){7}$",
      "description" : "seven hexadecimal digits identifying the bug.  These are should be taken from the prefix of the hash of the merge commit for the fixed bugs (for other bugs pick them reasonably from another commit.)."
    },
    "title" : { 
      "type" : "string",
      "maxLength" : 160,
      "minLength" : 1,
      "description" : "A concise one-line summary of the bug intended for domain non-experts (typically 10 words or less)"
    },
    "description" : { 
      "type" : "string",
      "minLength" : 1,
      "description" : "Textual description of the bug (typically 5-10 lines). Try to write this so that a domain non-expert software developer will be able to understand what this bug is about. This often involves writing about the *cause* of the bug (what was the underlying problem and what needed fixing) as well as the *effect* of the bug (how did the bug manifest itself), including whatever else is relevant in order to have a rough idea of the bug. (The text is indented five spaces.)"
    },
    "classification" : { 
      "type" : "string",
      "minLength" : 1,
      "description" : "The Common Weakness Enumeration (CWE) is a community-developed list of common software security weaknesses.   It is essentially a taxonomy of errors (weaknesses). We will try to use this taxonomy to classify the errors in terms of their effect; e.g.: 'CWE-476: NULL Pointer Dereference'.  Since CWE is primarily concerned with security, it is sometimes necessary to add your own new categories (without a number identifier) not covered by the taxonomy; e.g., dependency errors, type errors, and robotics-specific weaknesses. In many cases, multiple categories are applicable. You should then pick the most appropriate category."
    },
    "keywords" : { 
      "type" : "array", 
      "items" : { 
        "type" : "string", 
        "minLength" : 1,
        "maxLength" : 80 
      },
      "description" : "a list of key words; e.g.,: xacro, gazebo, urdf, driver"
    },
    "system" : { 
      "type" : "string", 
      "minLength" : 1,
      "maxLength" : 40,
      "description" : "An identifier for the system at hand (e.g., kobuki, motoman, mavros). If it's a confidential system, then just put the value 'confidential'."
    },
    "severity" : { 
      "enum": [ "error", "warning", "convention-violation", "bad-smell",
        "minor-issue" ],
      "description" : "A subjective assessment of the severity of the bug in terms of its overall effect.  Its value should be one of the following options: error, warning, convention-violation, bad-smell, minor-issue. Most problems will be errors.  All categories refer to code, so convention-violation is a coding convention violation (similarly, for bad-smells)."
    },
    "links" : { 
      "type" : "array", 
      "items" : { 
        "type" : "string", 
        "minLength" : 1,
        "format" : "uri" 
      },
      "description" : "A list of links to additional information relevant for understanding the bug."
    },
    "bug" : { 
      "type" : "object",
      "description" : "The following fields relate to the manifestation of the bug itself which is also sometimes referred to as the effect of the bug (as opposed to the underlying cause of the bug involving how it was fixed which is covered later; cf. “FIX” below).  Manifestation of a bug is what the testing terminology calls a *failure*.",
      "properties" : {
        "phase" : { 
          "enum" : [ "programming-time", "build-time", "compile-time",
            "deployment-time", "runtime-initialization", "runtime-operation" ],
          "description" : "In what phase of the software life cycle did the error occur?  Please pick the most appropriate among the following:  1. programming-time (for errors that are detected by programmers, for instance due to a missing API, etc.) 2.  build-time (for errors that are reported by the build/make tools that compose the source code prior to compilation) 3. compile-time (for errors that are reported by the compiler itself) 4.  deployment-time (for errors that occur after compilation and before the program is run; often when some deployment or installation scripts are run. This also includes installation time)? 5. runtime-initialization (for errors that occur when the software is run and being initialized). This includes both virtual simulation and real hardware. 6.  runtime-operation (for errors that occur when the software is run on normal operation after having been initialized), including both virtual simulation and hardware"
        },
        "specificity" : { 
          "enum" : [ "general issue", "robotics-specific", "ROS-specific",
            "application-specific" ],
          "description" : "How this bug generalizes; whether it is a general software issue applicable to many or most software projects or whether it is a general robotics issue or something completely specific applicable only to the ROS or ROS-I projects. Please pick the most appropriate among the following options: 1. 'general issue' (similar issues are to be expected in many or most software projects). Heuristic: An issue is general if a single tool solving this issue could plausibly solve it for a broad class of software projects. 2.  robotics-specific (similar issues are to be expected in other robotics platforms). 3.  ROS-specific (quite idiosyncratic as to how ROS or ROS-I is built). Heuristic: If a special ROS tool is needed to solve this issue, then it is probably ROS-specific. 4. application-specific (specific to an application)."
        },
        "architectural-location" : { 
          "enum" :  [ "application-specific code", "platform code", "N/A" ],
          "description" : "Where did the bug occur? Please pick one of the following two options: 'application-specific code' (did the bug occur in an application) or 'platform code' (did the bug occur in ROS or ROS-I platform itself)"
        },
        "application" : {
          "oneOf" : [
            { "type" : "string", "minLength" : 1 },
            { "type" : "null" }
          ],
          "description" : "In case you answered 'application-specific' above, please specify what the application was: textual description of robot application (e.g., 'picker robot'); N/A for platform code. Use null if the application is unknown or classified."
        },
        "task" : { 
          "enum" : [ "perception", "localization", "planning", "manipulation",
            "human-robot interaction", "simulation", "diagnostics", "SLAM",
            "N/A" ],
          "description" : "the task in which the bug occurred: perception (including Object Detection, Collision Detection), localization, planning (including path, trajectory, collision), manipulation (including actuation and motion), human-robot interaction, simulation (including visualization), diagnostics, SLAM (simultaneous localization and mapping), N/A"
        },
        "subsystem" : { 
          "type" : "string",
          "minLength" : 1,
          "description" : "In which subsystem (part of the organizational structure of the project) did the bug occur: motion, driver, controller (orchestration), core component, generic task component (e.g., a planner, tf2/geometry2), specific application component (e.g., auto docking), ..."
        },
        "package" : { 
          "type" : "array",
          "items" : {
            "type" : "string", 
            "minLength" : 5,
            "pattern" : "^([a-z0-9A-Z_]+)(/[a-z0-9A-Z_]+){2}$"
          },
          "description" : "A list of packages involved. Each entry should specify the project, the repository, and the package, for example: 'ros-industrial/universal_robot/ur_bringup'"
        },
        "languages" : { 
          "type" : "array", 
          "items" : { "enum" : [ "python", "cmake", "C++", "package.xml",
            "launch.xml", "msg", "srv", "xacro", "urdf" ] },
          "description" : "A list of the languages involved in the failure. N/A if the error is not explicitly reported by the language infrastructure.  Avoid a generic XML tag (all files in ROS have some known schema, and let's try to narrow it down when writing). Also the language should be N/A if the bug is not reported by the language infrastructure (so if the error is in package.xml but a C++ compiler fails then the language is 'C++' here, not 'package.xml'.  The latter is listed under the fix. If the error is not reported by a language infrastructure, but for instance wrong behavior is discovered in simulation, then do not put a language in).  For this reason it should be fairly unusual to have more than one language listed here."
        },
        "detected-by" : { 
          "enum" : [ "build system", "compiler", "code scanning tool",
            "assertions", "runtime detection", "runtime crash", 
            "testing violation", "developer", "user" ],
          "description" : "How was the bug detected? Please pick the most appropriate among the following predefined list: 'build system' (the bug was detected by the build system prior to compilation), compiler (the bug was detected by the compiler itself, this includes xacro, which compiles xacro files to urdf), 'code scanning tool' (the bug was detected by QA code scanning tools), assertions (the bug was detected by assertions statements in the code; e.g., 'assert(x>0);'), 'runtime detection' (the bug was detected at runtime; e.g., an exception was thrown), 'runtime crash' (the bug caused the system to crash at runtime and cease functioning), 'testing violation' (the bug was detected by violating a test case), developer (the bug was detected by a developer of the system), user (the bug was detected by a user of the system)."
        },
        "reported-by" : { 
          "enum" : [ "guest user", "contributor", "member developer",
            "automatic", "unreported" ],
          "description" : "How was the bug reported? Please pick the most appropriate among the following predefined list: 'guest user' (the bug was reported by a guest user), contributor (the bug was reported by a developer/contributor), 'member developer; (the bug was reported by a member developer),  'automatic' (the bug was reported by an automatic test/analyze QA service, including continuous integration), 'unreported' (the bug was not reported; e.g., because it was fixed directly without any reports)."
        },
        "issue" : { 
          "type" : "string", 
          "minLength" : 3,
          "pattern" : "^((https://github\\.com/[a-zA-Z0-9_]+/[a-zA-Z0-9_]+/issues/[0-9]+)?)|(N/A)$",
          "description" : "A URI reference to an issue tracker entry (e.g., GitHub or StackOverflow). This will obviously be N/A if the bug is unreported.  But even for some reported bugs there will be no issue created (bugs can be reported through other channels). Add reports through other channels under links (above)."
        }, 
        "time-reported" : { 
          "type" : "string", 
          "minLength" : 10,
          "format" : "date-time",
          "description" : "The time the bug was reported (“unreported” if it was not reported); e.g.: '2017-12-31 (23:59)'."
        },
        "reproducibility" : { 
          "enum" : [ "always", "sometimes", "rare" ]
        },
        "trace" : { 
          "type" : "string", 
          "minLength" : 1,
          "description" : "For runtime bugs, this is a trace (call stack/sequence of function calls) to the bug.   N/A for bugs not involving runtime (e.g., type errors or build-system bugs)."
        },
        "reproduction" : {
          "oneOf" : [ 
            { "type" : "string", "minLength" : 1 },
            { "type" : "null" }
          ],
          "description" : "Any notes about how you reproduced the bug in your L3 test case.  The idea is to help the reader analyze the test (the main idea should be here).  For instance: I inserted an assertion to enforce X at a point B, and then modified a launch file to provide the input that drives it there.  Or since the bug was flaky and hard to reproduce, we first determinized the control flow, and then ... This field is null for many bugs, or missing, or it contains notes about a reproduction idea, rather than a succesful reproduction."
        }
      },
      "required" : [ "phase", "specificity",
        "architectural-location", "application", "task",
        "subsystem", "package", "languages", "detected-by",
        "reported-by", "issue", "time-reported",
        "reproducibility", "trace"] 
    },
    "fix" : { 
      "type" : "object",
      "description" : "The following fields relate to the fixing of the bug which is also sometimes referred to as the cause of the bug (as opposed to the underlying effect of the bug which was covered above under “BUG”).  The fix of the bug involves removing the actual *fault* (in testing terminology).",
      "properties" : {
        "repo" : { 
          "type" : "string",
          "minLength" : 3,
          "pattern" : "^(https://github\\.com/[a-zA-Z0-9_]+/[a-zA-Z0-9_]+)$",
          "description" : "URI reference to repository where the bug was fixed."
        },
        "hash" : {
          "type" : "string",
          "minLength" : 40,
          "maxLength" : 40,
          "pattern" : "^[0-9a-f]{40}$",
          "description" : "The hexadecimal hash code of the commit that fixed the bug. (With pull requests there are two commits; one is in the local branch from which the pull request is created, the other is the actual merging commit on the mainline; we should try to report the latter as this is what is more easily accessible long term; other branches may be deleted. Also the merge commit gives a single reference id, while the pull request branch may consist of several smaller commits.)"
        },
        "pull-request" : { 
          "type" : "string", 
          "minLength" : 1,
          "pattern" : "(^(https://github\\.com/[a-zA-Z0-9_]+/[a-zA-Z0-9_]+/pull/[0-9]+)?$)|(^N/A$)", 
          "description" : "URI for pull request that fixed the bug.  N/A if no pull request (for instance direct commit)."
        },
        "license" : { 
          "type" : "array", 
          "items" : { 
            "enum" : [ "BSD", "GPLv3", "LGPLv3" ],
            "description" : "License of the file containing the fix."
          } 
        },
        "fix-in" : { 
          "type" : "array", 
          "items" : { 
            "type" : "string",
            "minLength" : 1
          },
          "description" : "A list of files that were updated when fixing the bug (if a commit or pull-request contains irrelevant edits, then these should not be placed on this list as far as possible)"
        },
        "languages" : { 
          "type" : "array", 
          "items" : { 
            "enum" : [ "python", "cmake", "C++", "package.xml", "launch.xml",
              "msg", "srv", "xacro", "urdf" ] 
          },
          "description" : "The languages involved in fixing the bug. (See list of conventions for naming languages under bug/language)."
        },
        "time" : { 
          "oneOf" : [ 
            { "type" : "string", "minLength" : 10, "format" : "date-time" }, 
            { "type" : "null" }
          ],
          "description" : "The time the bug was fixed ('null' if it was not fixed); e.g.: '2017-12-31 (23:59)'.  Use the merge commit time into the mainline development if possible.  This is when the fix makes it into the project tree."
        }
       },
     "required" : [ "repo", "hash", "pull-request", "license", "fix-in",
       "languages", "time" ] 
    },
    "time-machine"   : { },
    "bugzoo"         : { }
  },
  "required" : ["id", "title", "description", "classification", "keywords",
    "system", "severity", "links", "bug", "fix"]
}
