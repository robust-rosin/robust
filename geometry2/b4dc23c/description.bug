%YAML 1.1
---
title: Processing command-line arguments accesses wrong cells, possibly out of bounds
description: >
    In the static_transform_broadcaster_program.cpp the main function processes command line arguments.  The program accepts either 10 or 9 arguments, and the validity of the arguments is checked slightly differently for the two cases. Presumably due to a cut-and-paste mistake, the error reporting code is the same in both cases, and in the case of 9 arguments, it accesses the value argv[9] which might not then exist.  
    This may read the array out-of-bounds (accessing a NULL value).   Through a series of macros for error reporting this expands to executing ::ros::console::print, and through further several function calls to vsnprintf call (a standard library function) that will traverse the argument to produce an error string.  This presumably might dereference the pointer to a non existing string argument leading to a crash. After this the program quits.
    The consequences of this might be potentially serious. In the best case, the program crashes for memory violation, or the error has no side effects.  In the worst case, in combination with bugs in the standard library or the operating system, this might be usable to create security exploits, compromising the host machine.  However, with the current implementation of the vsnprintf in libraries, the dereference is not made.  The library checks for NULL, and formats the string "(null)" in such case.
    In regular situation, where this node is started via a launch file, the access will not actually be out-of-bounds. The launch mechanism (roslaunch or rostest) will pass additional parameters to the node. The opening call to ros::init will hide these parameters by sorting them to the end of the argv array, and decreasing the argc counter.  Thus in a regular launch situation this bug will simply access some of the hidden parameter values, producing a broken error message; not more.
classification: "CWE-125: Out-of-bounds Read"
keywords: ['c++', 'out-of-bounds', 'command-line arguments', 'logging']
system: core component
severity: minor-issue
links:
  - http://docs.ros.org/api/rosconsole/html/rosconsole_8cpp_source.html#l00460
bug:
  phase: runtime-operation
  specificity: general issue
  architectural-location: platform code
  application: null
  task: null
  subsystem: generic task component
  package: ros/geometry2/tf2_ros
  languages:
    - C++
  detected-by: developer
  reported-by: unreported
  issue: null
  time-reported: null
  reproducibility: always
  trace: >
    Call the main function in static_transform_broadcaster_program.cpp giving 9 arguments, with the last two arguments being the same string.
  reproduction: >
    The idea is to  start the node with wrong and good parameters in parallel with a dummy test that always passes. Then the success of the rostest only depends on whether the nodes have crashed or not.  Use launch-prefix to inspect whether a node test failed because of (expected) parameter validation, or because an assertion failed.  The assertions are inserted by redefining ROS_FATAL for the file in question (otherwise we would need to change the file, and the fixing commit would either not pass the test, or would not apply).
fix:
  repo: https://github.com/ros/geometry2
  hash: b4dc23c54ba06a846c64215a2d8f944c5a1bd036
  pull-request: https://github.com/ros/geometry2/pull/167
  license: ['BSD']
  fix-in: ['tf2_ros/src/static_transform_broadcaster_program.cpp']
  languages:
    - C++
  time: 2016-04-02 (08:29)
